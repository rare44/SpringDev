package com.spring.shop.gallery;

import java.io.File;
import java.io.FileOutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Service;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.interceptor.DefaultTransactionAttribute;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.spring.shop.notice.Notice;

@Controller
class GalleryController {

	@Autowired
	GalleryDAO gd;

	@Autowired
	private PlatformTransactionManager transactionManager;
	
	@RequestMapping(value = "/gallery", method = RequestMethod.GET)
	public String gallery(HttpServletRequest req) {
		req.setAttribute("content", "gallery.jsp");
		return "home";
	}

	@RequestMapping(value = "/gallery/writeGallery", method = RequestMethod.GET)
	public String writeGallery(HttpServletRequest req) {
		// 트랜젝션처리 >> 여러가지의 작업단위를 하나의 작업으로 묶는 것
		String path = mr.getSession().getServletContext().getRealPath("resources/file");
		Map<String, Object> param = new HashMap<String, Object>();
		TransactionStatus status = transactionManager.getTransaction(new DefaultTransactionAttribute());
		File saveDir = new File(path);
		if (!saveDir.exists()) {
			saveDir.mkdirs();
		}
		MultipartFile f = mr.getFile("file");
		String name = f.getOriginalFilename();
		long size = f.getSize();
		String savedname = "";

		try {
			nDAO.writeNotice(n);
			if (!name.isBlank()) {
				try {
					
					File destination = File.createTempFile("F_" + System.currentTimeMillis(),
							name.substring(name.lastIndexOf(".")), saveDir);
					savedname = destination.getName();
					FileCopyUtils.copy(f.getInputStream(), new FileOutputStream(destination));
				} catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
					return 0;
				}
				
				param.put("savedfilename", savedname);
				param.put("filename", name);
				param.put("size", size);
				param.put("boardid", n.getNi_no());

				nDAO.insertAttach(param);
			}
			transactionManager.commit(status);
			return 1;
		} catch (Exception e) {
			// TODO: handle exception
			File delFile = new File(path + "/" + savedname);
			delFile.delete();
			transactionManager.rollback(status);
			return 0;
		}

		try {
			Gallery one = gd.selectOne(req);
			req.setAttribute("one", one);
			
		} catch (Exception e) {
			req.setAttribute("content", "galleryWrite.jsp");

			return "home";
		}
		
		req.setAttribute("content", "galleryWrite.jsp");
		return "home";
	}

	@RequestMapping(value = "/gallery/writeGo", method = RequestMethod.POST)
	public String writeGo(Gallery n, HttpServletRequest req) {
		MultipartHttpServletRequest mr = (MultipartHttpServletRequest) req;

		String mode = mr.getParameter("MODE");
		int rst = 0;
		if (mode.equals("ADD")) {
			rst = gd.writeGallery(n, mr);
			if (rst > 0) {
				req.setAttribute("MSG", "글쓰기 성공");
			} else {
				req.setAttribute("MSG", "글쓰기 실패");
			}

		} else {
			// 업뎃
			rst = gd.updateOne(n);
			if (rst > 0) {
				req.setAttribute("MSG", "수정 성공");
			} else {
				req.setAttribute("MSG", "수정 실패");
			}
		}

		req.setAttribute("content", "gallery.jsp");

		return "home";
	}

	@RequestMapping(value = "/getGalleryList", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> getGalleryList(HttpServletRequest req) {

		return gd.getGalleryList(req);
	}

	@RequestMapping(value = "/gallery/delete", method = RequestMethod.GET)
	public String delete(HttpServletRequest req) {
		gd.deleteOne(req);
		req.setAttribute("content", "gallery.jsp");
		return "home";
	}
}
